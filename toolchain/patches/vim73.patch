diff -rupN vim73/src/auto/configure vim73.new/src/auto/configure
--- vim73/src/auto/configure	2010-08-13 07:17:15.000000000 -0700
+++ vim73.new/src/auto/configure	2013-04-12 22:18:41.041376890 -0700
@@ -316,7 +316,7 @@ $as_echo X"$as_dir" |
       test -d "$as_dir" && break
     done
     test -z "$as_dirs" || eval "mkdir $as_dirs"
-  } || test -d "$as_dir" || as_fn_error "cannot create directory $as_dir"
+  } || test -d "$as_dir"
 
 
 } # as_fn_mkdir_p
@@ -11639,37 +11639,6 @@ _ACEOF
 
 
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking uint32_t is 32 bits" >&5
-$as_echo_n "checking uint32_t is 32 bits... " >&6; }
-if test "$cross_compiling" = yes; then :
-  as_fn_error "could not compile program using uint32_t." "$LINENO" 5
-else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-
-#ifdef HAVE_STDINT_H
-# include <stdint.h>
-#endif
-#ifdef HAVE_INTTYPES_H
-# include <inttypes.h>
-#endif
-main() {
-  uint32_t nr1 = (uint32_t)-1;
-  uint32_t nr2 = (uint32_t)0xffffffffUL;
-  if (sizeof(uint32_t) != 4 || nr1 != 0xffffffffUL || nr2 + 1 != 0) exit(1);
-  exit(0);
-}
-_ACEOF
-if ac_fn_c_try_run "$LINENO"; then :
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: ok" >&5
-$as_echo "ok" >&6; }
-else
-  as_fn_error "WRONG!  uint32_t not defined correctly." "$LINENO" 5
-fi
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
-  conftest.$ac_objext conftest.beam conftest.$ac_ext
-fi
-
 
 
 bcopy_test_prog='
diff -rupN vim73/src/configure.in vim73.new/src/configure.in
--- vim73/src/configure.in	2010-08-13 07:15:17.000000000 -0700
+++ vim73.new/src/configure.in	2013-04-12 22:18:41.049376887 -0700
@@ -3180,7 +3180,7 @@ main() {
 }],
 AC_MSG_RESULT(ok),
 AC_MSG_ERROR([WRONG!  uint32_t not defined correctly.]),
-AC_MSG_ERROR([could not compile program using uint32_t.]))
+AC_MSG_RESULT([assuming ok]))
 
 dnl Check for memmove() before bcopy(), makes memmove() be used when both are
 dnl present, fixes problem with incompatibility between Solaris 2.4 and 2.5.
diff -rupN vim73/src/feature.h vim73.new/src/feature.h
--- vim73/src/feature.h	2010-07-27 12:45:42.000000000 -0700
+++ vim73.new/src/feature.h	2013-04-12 22:18:41.033376891 -0700
@@ -1012,7 +1012,7 @@
  * +system		Use system() instead of fork/exec for starting a
  *			shell.  Doesn't work for the GUI!
  */
-/* #define USE_SYSTEM */
+#define USE_SYSTEM 
 
 /*
  * +X11			Unix only.  Include code for xterm title saving and X
@@ -1312,3 +1312,4 @@
 #ifdef FEAT_NORMAL
 # define FEAT_PERSISTENT_UNDO
 #endif
+#define SYS_VIMRC_FILE "/etc/vimrc"
diff -rupN vim73/src/fileio.c vim73.new/src/fileio.c
--- vim73/src/fileio.c	2010-08-14 05:20:54.000000000 -0700
+++ vim73.new/src/fileio.c	2013-04-12 22:18:41.049376887 -0700
@@ -7362,6 +7362,9 @@ vim_tempname(extra_char)
     struct stat	st;
 # endif
 
+    sprintf((char *)itmp, "/.vim-%ld", temp_count++);
+    return vim_strsave(itmp);
+
     /*
      * This will create a directory for private use by this instance of Vim.
      * This is done once, and the same directory is used for all temp files.
diff -rupN vim73/src/Makefile vim73.new/src/Makefile
--- vim73/src/Makefile	2010-08-15 05:56:15.000000000 -0700
+++ vim73.new/src/Makefile	2013-04-12 22:18:41.041376890 -0700
@@ -930,6 +930,9 @@ TOOLS = xxd/xxd$(EXEEXT)
 #		directories.  This directory must exist.
 #DESTDIR  = ~/pkg/vim
 
+DESTDIR=/usr/share/vim
+prefix=/usr
+
 ### Directory of the man pages
 MAN1DIR = /man1
 
diff -rupN vim73/src/os_unix.c vim73.new/src/os_unix.c
--- vim73/src/os_unix.c	2010-08-08 06:14:04.000000000 -0700
+++ vim73.new/src/os_unix.c	2013-04-12 22:18:41.049376887 -0700
@@ -31,6 +31,33 @@
 
 #include "vim.h"
 
+#define POLLIN      0x0001    /* There is data to read */
+#define POLLPRI     0x0002    /* There is urgent data to read */
+#define POLLOUT     0x0004    /* Writing now will not block */
+#define POLLERR     0x0008    /* Error condition */
+#define POLLHUP     0x0010    /* Hung up */
+#define POLLNVAL    0x0020    /* Invalid request: fd not open */
+
+struct pollfd {
+    int fd;           /* file descriptor */
+    short events;     /* requested events */
+    short revents;    /* returned events */
+};
+
+int poll(struct pollfd * ufds, long nfds, int timeout) {
+    int fds = 0;
+    int i = 0;
+    for (i = 0; i < nfds; ++i) {
+	int fd = ufds[i].fd;
+	struct stat _stat;
+	fstat(fd, &_stat);
+	if (_stat.st_size) {
+	    fds++;
+	}
+    }
+    return fds;
+}
+
 #ifdef FEAT_MZSCHEME
 # include "if_mzsch.h"
 #endif
